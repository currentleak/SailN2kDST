
optiboot_can485.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0001fdfe  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  0001fc00  0001fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0001fffe  0001fffe  00000292  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000593  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000024b  00000000  00000000  0000087f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000344  00000000  00000000  00000aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000e10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001cc  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f0  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001fc00 <main>:
#define appstart_vec (0)
#endif // VIRTUAL_BOOT_PARTITION


/* main program starts here */
int main(void) {
   1fc00:	1f 92       	push	r1
   1fc02:	cd b7       	in	r28, 0x3d	; 61
   1fc04:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
   1fc06:	11 24       	eor	r1, r1
  /* 
   * AST
   * Seems necessary to set SP manually
   */
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)|| defined (__AVR_AT90CAN128__)
  SP=RAMEND;  // This is done by hardware reset
   1fc08:	8f ef       	ldi	r24, 0xFF	; 255
   1fc0a:	90 e1       	ldi	r25, 0x10	; 16
   1fc0c:	9e bf       	out	0x3e, r25	; 62
   1fc0e:	8d bf       	out	0x3d, r24	; 61
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
#if !defined(__AVR_ATmega16__)
  ch = MCUSR;
   1fc10:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
   1fc12:	14 be       	out	0x34, r1	; 52
#else
  ch = MCUCSR;
  MCUCSR = 0;
#endif
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
   1fc14:	98 2f       	mov	r25, r24
   1fc16:	9d 70       	andi	r25, 0x0D	; 13
   1fc18:	09 f0       	breq	.+2      	; 0x1fc1c <main+0x1c>
      appStart(ch);
   1fc1a:	eb d0       	rcall	.+470    	; 0x1fdf2 <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
   1fc1c:	85 e0       	ldi	r24, 0x05	; 5
   1fc1e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
   1fc22:	82 e0       	ldi	r24, 0x02	; 2
   1fc24:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
   1fc28:	88 e1       	ldi	r24, 0x18	; 24
   1fc2a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
   1fc2e:	86 e0       	ldi	r24, 0x06	; 6
   1fc30:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
   1fc34:	80 e1       	ldi	r24, 0x10	; 16
   1fc36:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
   1fc3a:	8e e0       	ldi	r24, 0x0E	; 14
   1fc3c:	c5 d0       	rcall	.+394    	; 0x1fdc8 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
   1fc3e:	21 9a       	sbi	0x04, 1	; 4
   1fc40:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc42:	20 e3       	ldi	r18, 0x30	; 48
   1fc44:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
   1fc46:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc48:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
   1fc4c:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    TIFR1 = _BV(TOV1);
   1fc50:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
   1fc52:	b0 9b       	sbis	0x16, 0	; 22
   1fc54:	fe cf       	rjmp	.-4      	; 0x1fc52 <main+0x52>
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
   1fc56:	19 9a       	sbi	0x03, 1	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fc58:	a8 95       	wdr
   1fc5a:	81 50       	subi	r24, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
   1fc5c:	a9 f7       	brne	.-22     	; 0x1fc48 <main+0x48>
   1fc5e:	41 2c       	mov	r4, r1
   1fc60:	51 2c       	mov	r5, r1
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
   1fc62:	43 e0       	ldi	r20, 0x03	; 3
   1fc64:	f4 2e       	mov	r15, r20
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
   1fc66:	ee 24       	eor	r14, r14
   1fc68:	e3 94       	inc	r14
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
   1fc6a:	55 e0       	ldi	r21, 0x05	; 5
   1fc6c:	d5 2e       	mov	r13, r21
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
   1fc6e:	61 e1       	ldi	r22, 0x11	; 17
   1fc70:	c6 2e       	mov	r12, r22
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
   1fc72:	9e d0       	rcall	.+316    	; 0x1fdb0 <getch>

    if(ch == STK_GET_PARAMETER) {
   1fc74:	81 34       	cpi	r24, 0x41	; 65
   1fc76:	79 f4       	brne	.+30     	; 0x1fc96 <main+0x96>
      unsigned char which = getch();
   1fc78:	9b d0       	rcall	.+310    	; 0x1fdb0 <getch>
      verifySpace();
   1fc7a:	89 83       	std	Y+1, r24	; 0x01
   1fc7c:	ab d0       	rcall	.+342    	; 0x1fdd4 <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
   1fc7e:	89 81       	ldd	r24, Y+1	; 0x01
   1fc80:	82 38       	cpi	r24, 0x82	; 130
   1fc82:	11 f4       	brne	.+4      	; 0x1fc88 <main+0x88>
	  putch(optiboot_version & 0xFF);
   1fc84:	82 e0       	ldi	r24, 0x02	; 2
   1fc86:	05 c0       	rjmp	.+10     	; 0x1fc92 <main+0x92>
      } else if (which == STK_SW_MAJOR) {
   1fc88:	81 38       	cpi	r24, 0x81	; 129
   1fc8a:	11 f4       	brne	.+4      	; 0x1fc90 <main+0x90>
	  putch(optiboot_version >> 8);
   1fc8c:	86 e0       	ldi	r24, 0x06	; 6
   1fc8e:	01 c0       	rjmp	.+2      	; 0x1fc92 <main+0x92>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
   1fc90:	83 e0       	ldi	r24, 0x03	; 3
   1fc92:	87 d0       	rcall	.+270    	; 0x1fda2 <putch>
   1fc94:	83 c0       	rjmp	.+262    	; 0x1fd9c <main+0x19c>
      }
    }
    else if(ch == STK_SET_DEVICE) {
   1fc96:	82 34       	cpi	r24, 0x42	; 66
   1fc98:	11 f4       	brne	.+4      	; 0x1fc9e <main+0x9e>
      // SET DEVICE is ignored
      getNch(20);
   1fc9a:	84 e1       	ldi	r24, 0x14	; 20
   1fc9c:	03 c0       	rjmp	.+6      	; 0x1fca4 <main+0xa4>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
   1fc9e:	85 34       	cpi	r24, 0x45	; 69
   1fca0:	19 f4       	brne	.+6      	; 0x1fca8 <main+0xa8>
      // SET DEVICE EXT is ignored
      getNch(5);
   1fca2:	85 e0       	ldi	r24, 0x05	; 5
   1fca4:	9f d0       	rcall	.+318    	; 0x1fde4 <getNch>
   1fca6:	7a c0       	rjmp	.+244    	; 0x1fd9c <main+0x19c>
    }
    else if(ch == STK_LOAD_ADDRESS) {
   1fca8:	85 35       	cpi	r24, 0x55	; 85
   1fcaa:	71 f4       	brne	.+28     	; 0x1fcc8 <main+0xc8>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
   1fcac:	81 d0       	rcall	.+258    	; 0x1fdb0 <getch>
   1fcae:	18 2f       	mov	r17, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
   1fcb0:	7f d0       	rcall	.+254    	; 0x1fdb0 <getch>
   1fcb2:	41 2e       	mov	r4, r17
   1fcb4:	51 2c       	mov	r5, r1
   1fcb6:	58 2a       	or	r5, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
   1fcb8:	85 2d       	mov	r24, r5
   1fcba:	88 1f       	adc	r24, r24
   1fcbc:	88 27       	eor	r24, r24
   1fcbe:	88 1f       	adc	r24, r24
   1fcc0:	8b bf       	out	0x3b, r24	; 59
#endif
      newAddress += newAddress; // Convert from word address to byte address
   1fcc2:	44 0c       	add	r4, r4
   1fcc4:	55 1c       	adc	r5, r5
   1fcc6:	69 c0       	rjmp	.+210    	; 0x1fd9a <main+0x19a>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
   1fcc8:	86 35       	cpi	r24, 0x56	; 86
   1fcca:	21 f4       	brne	.+8      	; 0x1fcd4 <main+0xd4>
      // UNIVERSAL command is ignored
      getNch(4);
   1fccc:	84 e0       	ldi	r24, 0x04	; 4
   1fcce:	8a d0       	rcall	.+276    	; 0x1fde4 <getNch>
      putch(0x00);
   1fcd0:	80 e0       	ldi	r24, 0x00	; 0
   1fcd2:	df cf       	rjmp	.-66     	; 0x1fc92 <main+0x92>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
   1fcd4:	84 36       	cpi	r24, 0x64	; 100
   1fcd6:	09 f0       	breq	.+2      	; 0x1fcda <main+0xda>
   1fcd8:	3f c0       	rjmp	.+126    	; 0x1fd58 <main+0x158>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
   1fcda:	6a d0       	rcall	.+212    	; 0x1fdb0 <getch>
   1fcdc:	08 2f       	mov	r16, r24
   1fcde:	10 e0       	ldi	r17, 0x00	; 0
   1fce0:	10 2f       	mov	r17, r16
   1fce2:	00 27       	eor	r16, r16
   1fce4:	65 d0       	rcall	.+202    	; 0x1fdb0 <getch>
   1fce6:	08 2b       	or	r16, r24
      savelength = length;
      desttype = getch();
   1fce8:	63 d0       	rcall	.+198    	; 0x1fdb0 <getch>
   1fcea:	78 2e       	mov	r7, r24
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
   1fcec:	58 01       	movw	r10, r16
      savelength = length;
      desttype = getch();
   1fcee:	81 2c       	mov	r8, r1
   1fcf0:	99 24       	eor	r9, r9
   1fcf2:	93 94       	inc	r9

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
   1fcf4:	5d d0       	rcall	.+186    	; 0x1fdb0 <getch>
   1fcf6:	f4 01       	movw	r30, r8
   1fcf8:	81 93       	st	Z+, r24
   1fcfa:	4f 01       	movw	r8, r30
      while (--length);
   1fcfc:	f1 e0       	ldi	r31, 0x01	; 1
   1fcfe:	af 1a       	sub	r10, r31
   1fd00:	b1 08       	sbc	r11, r1
   1fd02:	c1 f7       	brne	.-16     	; 0x1fcf4 <main+0xf4>

      // Read command terminator, start reply
      verifySpace();
   1fd04:	67 d0       	rcall	.+206    	; 0x1fdd4 <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
   1fd06:	85 e4       	ldi	r24, 0x45	; 69
   1fd08:	78 12       	cpse	r7, r24
   1fd0a:	01 c0       	rjmp	.+2      	; 0x1fd0e <main+0x10e>
   1fd0c:	ff cf       	rjmp	.-2      	; 0x1fd0c <main+0x10c>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
   1fd0e:	f2 01       	movw	r30, r4
   1fd10:	f7 be       	out	0x37, r15	; 55
   1fd12:	e8 95       	spm
	    boot_spm_busy_wait();
   1fd14:	07 b6       	in	r0, 0x37	; 55
   1fd16:	00 fc       	sbrc	r0, 0
   1fd18:	fd cf       	rjmp	.-6      	; 0x1fd14 <main+0x114>
   1fd1a:	80 e0       	ldi	r24, 0x00	; 0
   1fd1c:	90 e0       	ldi	r25, 0x00	; 0
   1fd1e:	fc 01       	movw	r30, r24
   1fd20:	f3 95       	inc	r31
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
   1fd22:	20 81       	ld	r18, Z
   1fd24:	fc 01       	movw	r30, r24
   1fd26:	e4 0d       	add	r30, r4
   1fd28:	f5 1d       	adc	r31, r5
   1fd2a:	dc 01       	movw	r26, r24
   1fd2c:	af 5f       	subi	r26, 0xFF	; 255
   1fd2e:	be 4f       	sbci	r27, 0xFE	; 254
		a |= (*bufPtr++) << 8;
   1fd30:	4c 91       	ld	r20, X
   1fd32:	30 e0       	ldi	r19, 0x00	; 0
   1fd34:	34 2b       	or	r19, r20
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
   1fd36:	09 01       	movw	r0, r18
   1fd38:	e7 be       	out	0x37, r14	; 55
   1fd3a:	e8 95       	spm
   1fd3c:	11 24       	eor	r1, r1
   1fd3e:	02 96       	adiw	r24, 0x02	; 2
		addrPtr += 2;
	    } while (len -= 2);
   1fd40:	08 17       	cp	r16, r24
   1fd42:	19 07       	cpc	r17, r25
   1fd44:	61 f7       	brne	.-40     	; 0x1fd1e <main+0x11e>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
   1fd46:	f2 01       	movw	r30, r4
   1fd48:	d7 be       	out	0x37, r13	; 55
   1fd4a:	e8 95       	spm
	    boot_spm_busy_wait();
   1fd4c:	07 b6       	in	r0, 0x37	; 55
   1fd4e:	00 fc       	sbrc	r0, 0
   1fd50:	fd cf       	rjmp	.-6      	; 0x1fd4c <main+0x14c>
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
   1fd52:	c7 be       	out	0x37, r12	; 55
   1fd54:	e8 95       	spm
   1fd56:	22 c0       	rjmp	.+68     	; 0x1fd9c <main+0x19c>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
   1fd58:	84 37       	cpi	r24, 0x74	; 116
   1fd5a:	91 f4       	brne	.+36     	; 0x1fd80 <main+0x180>
      uint8_t desttype;
      GETLENGTH(length);
   1fd5c:	29 d0       	rcall	.+82     	; 0x1fdb0 <getch>
   1fd5e:	08 2f       	mov	r16, r24
   1fd60:	10 e0       	ldi	r17, 0x00	; 0
   1fd62:	10 2f       	mov	r17, r16
   1fd64:	00 27       	eor	r16, r16
   1fd66:	24 d0       	rcall	.+72     	; 0x1fdb0 <getch>
   1fd68:	08 2b       	or	r16, r24

      desttype = getch();
   1fd6a:	22 d0       	rcall	.+68     	; 0x1fdb0 <getch>

      verifySpace();
   1fd6c:	33 d0       	rcall	.+102    	; 0x1fdd4 <verifySpace>
   1fd6e:	52 01       	movw	r10, r4
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
   1fd70:	f5 01       	movw	r30, r10
   1fd72:	87 91       	elpm	r24, Z+
   1fd74:	5f 01       	movw	r10, r30
   1fd76:	15 d0       	rcall	.+42     	; 0x1fda2 <putch>
	} while (--length);
   1fd78:	01 50       	subi	r16, 0x01	; 1
   1fd7a:	11 09       	sbc	r17, r1
   1fd7c:	c9 f7       	brne	.-14     	; 0x1fd70 <main+0x170>
   1fd7e:	0e c0       	rjmp	.+28     	; 0x1fd9c <main+0x19c>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
   1fd80:	85 37       	cpi	r24, 0x75	; 117
   1fd82:	39 f4       	brne	.+14     	; 0x1fd92 <main+0x192>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
   1fd84:	27 d0       	rcall	.+78     	; 0x1fdd4 <verifySpace>
      putch(SIGNATURE_0);
   1fd86:	8e e1       	ldi	r24, 0x1E	; 30
   1fd88:	0c d0       	rcall	.+24     	; 0x1fda2 <putch>
      putch(SIGNATURE_1);
   1fd8a:	87 e9       	ldi	r24, 0x97	; 151
   1fd8c:	0a d0       	rcall	.+20     	; 0x1fda2 <putch>
      putch(SIGNATURE_2);
   1fd8e:	81 e8       	ldi	r24, 0x81	; 129
   1fd90:	80 cf       	rjmp	.-256    	; 0x1fc92 <main+0x92>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
   1fd92:	81 35       	cpi	r24, 0x51	; 81
   1fd94:	11 f4       	brne	.+4      	; 0x1fd9a <main+0x19a>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
   1fd96:	88 e0       	ldi	r24, 0x08	; 8
   1fd98:	17 d0       	rcall	.+46     	; 0x1fdc8 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
   1fd9a:	1c d0       	rcall	.+56     	; 0x1fdd4 <verifySpace>
    }
    putch(STK_OK);
   1fd9c:	80 e1       	ldi	r24, 0x10	; 16
   1fd9e:	01 d0       	rcall	.+2      	; 0x1fda2 <putch>
  }
   1fda0:	68 cf       	rjmp	.-304    	; 0x1fc72 <main+0x72>

0001fda2 <putch>:
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
   1fda2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fda6:	95 ff       	sbrs	r25, 5
   1fda8:	fc cf       	rjmp	.-8      	; 0x1fda2 <putch>
  UART_UDR = ch;
   1fdaa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
   1fdae:	08 95       	ret

0001fdb0 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
   1fdb0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fdb4:	87 ff       	sbrs	r24, 7
   1fdb6:	fc cf       	rjmp	.-8      	; 0x1fdb0 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
   1fdb8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fdbc:	84 fd       	sbrc	r24, 4
   1fdbe:	01 c0       	rjmp	.+2      	; 0x1fdc2 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fdc0:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
   1fdc2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
   1fdc6:	08 95       	ret

0001fdc8 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fdc8:	e0 e6       	ldi	r30, 0x60	; 96
   1fdca:	f0 e0       	ldi	r31, 0x00	; 0
   1fdcc:	98 e1       	ldi	r25, 0x18	; 24
   1fdce:	90 83       	st	Z, r25
  WDTCSR = x;
   1fdd0:	80 83       	st	Z, r24
   1fdd2:	08 95       	ret

0001fdd4 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1fdd4:	ed df       	rcall	.-38     	; 0x1fdb0 <getch>
   1fdd6:	80 32       	cpi	r24, 0x20	; 32
   1fdd8:	19 f0       	breq	.+6      	; 0x1fde0 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1fdda:	88 e0       	ldi	r24, 0x08	; 8
   1fddc:	f5 df       	rcall	.-22     	; 0x1fdc8 <watchdogConfig>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
   1fdde:	ff cf       	rjmp	.-2      	; 0x1fdde <verifySpace+0xa>
  }
  putch(STK_INSYNC);
   1fde0:	84 e1       	ldi	r24, 0x14	; 20
   1fde2:	df cf       	rjmp	.-66     	; 0x1fda2 <putch>

0001fde4 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
   1fde4:	cf 93       	push	r28
   1fde6:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
   1fde8:	e3 df       	rcall	.-58     	; 0x1fdb0 <getch>
   1fdea:	c1 50       	subi	r28, 0x01	; 1
   1fdec:	e9 f7       	brne	.-6      	; 0x1fde8 <getNch+0x4>
  verifySpace();
}
   1fdee:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
   1fdf0:	f1 cf       	rjmp	.-30     	; 0x1fdd4 <verifySpace>

0001fdf2 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
   1fdf2:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
   1fdf4:	80 e0       	ldi	r24, 0x00	; 0
   1fdf6:	e8 df       	rcall	.-48     	; 0x1fdc8 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
   1fdf8:	e0 e0       	ldi	r30, 0x00	; 0
   1fdfa:	ff 27       	eor	r31, r31
   1fdfc:	09 94       	ijmp
